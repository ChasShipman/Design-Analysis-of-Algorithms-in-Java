/****************************************************************************** *  Name:    Charles Shipman * *  Partner Name:   None   *  *  Operating system:  Linux (Ubuntu 18.01) *  Compiler:  JDK 8 *  Text editor / IDE: DrJava * *  Hours to complete assignment (optional): way more than expected * ******************************************************************************//****************************************************************************** *  Describe how you implemented Percolation.java. How did you check *  whether the system percolates? I had to watch tutorial videos listed on blackboard many times. Roughly outlined how the program should work. Realized I was wrong. Referred to tips offered by other students through the discussion board. After reading more closely I found a 22 minute walkthrough of what the project is in the instructions for project 1 and after watching that I really understood the project. One posted link in particular was especially helpful in understanding a flat basis of what was really required (especially helpful for controlling backwash. A lot of trial and error and questioning amongst fellow students. Used stack overflow for a lot of java syntax questions because I’m new to javaLink from discussion post by Gravity Pleasant: https://codereview.stackexchange.com/questions/142400/percolation-model *****************************************************************************//****************************************************************************** *  Using Percolation with QuickFindUF.java, fill in the table below such       that  *  the N values are multiples of each other. *  Give a formula (using tilde notation) for the running time (in seconds)     of  *  PercolationStats.java as a function of both N and T. Be sure to give both  *  the coefficient and exponent of the leading term. Your coefficients     should  *  be based on empirical data and rounded to two significant digits, such as  *  5.3*10^-8 * N^5.0 T^1.5. *****************************************************************************/(keep T constant)Let T = 1 N          time (seconds)------------------------------100		0.083200		0.557400		8.980	800		154.4401600		2465.088 (any larger input would take too much time)b = 3.78315 c = -20.2725 T(N) = aN^b, where a = 2^cHypothesis: running time about 7.89531411e-7 x N^3.78315(keep N constant)Let N = 100 T          time (seconds)------------------------------100		3.591200		7.073400		14.146800		30.9521600		55.940running time as a function of N and T:  ~ T(N) = /****************************************************************************** *  Repeat the previous question, but use WeightedQuickUnionUF.java. *****************************************************************************/(keep T constant)Let T = 1 N          time (seconds)------------------------------100		0.024200		0.034400		0.070800		0.1681600		0.705(keep N constant)Let N = 100 T          time (seconds)------------------------------100		0.105200		0.186400		0.253800		0.5111600		0.966running time as a function of N and T:  ~ T(N) = /********************************************************************** *  How much memory (in bytes) does a Percolation object use to store *  an N-by-N grid? Use the 64-bit memory cost model from Section 1.4 *  of the textbook and use tilde notation to simplify your answer. *  Briefly justify your answers. * *  Include the memory for all referenced objects (deep memory). **********************************************************************//****************************************************************************** *  After reading the course collaboration policy, answer the *  following short quiz. This counts for a portion of your grade. *  Write down the answers in the space below. *****************************************************************************/1. B2. C1. How much help can you give a fellow student taking COSC 3304?(a) None. Only the Instructor and graders can help.(b) You can discuss ideas and concepts but students can get help    debugging their code only from an Instructor, grader, or     student who has already passed COSC 3304.(c) You can help a student by discussing ideas, selecting data    structures, and debugging their code.(d) You can help a student by emailing him/her your code.2. What are the rules when partnering? (a) You and your partner must both be present while writing code.     But after that only one person needs to do the analysis. (b) You and your partner must both be present while writing code     and during the analysis, but, after that, only one person     needs to be present while submitting the code and the     readme. (c) You and your partner must both be present while writing code,     during the analysis, and while submitting the code and the     readme. Failure to do so is a violation of the course     collaboration policy. /****************************************************************************** *  Known bugs / limitations. *****************************************************************************//****************************************************************************** *  Describe whatever help (if any) that you received. *  Don't include readings, lectures, or videos, but do *  include any help from people (including graders, lab technicians, *  classmates, and friends) and attribute them by name.	I did not receive any explicit help from students, more rather I just 		paid attention to what students were asking on the discussion forum. 	One of my questions on the forum about a deprecation error was 	answered by a student : Jobie Allen.	Beyond the class and students, websites that I used to understand the 	Project were stackoverflow, youtube, tutorialspoint  *****************************************************************************//****************************************************************************** *  Describe any serious problems you encountered. 	I’m new to java, so I really had to get used to the syntax and the  	dependency of classes. I’m not sure about running times, and I still   	feel as if I’m guessing when it comes to deriving them. Understanding 	how to bound the grid and include the virtual top and bottom took more 	time to realize than I’d like to admit. *SETTING UP THE CONSTRUCTORS*this took the most pen and paper work and I honestly wasn’t expecting them too, the videos that were provided made the project seem like not that hefty of a problem because of how well it was explained, but this was quickly realized when faced with determining how I wanted to or the best way to do the constructors. After many tries an rereading the specs I realized that the spec gives some useful hints, specifically as it relates to the percolationStats. *****************************************************************************//****************************************************************************** *  List any other comments here. Feel free to provide any feedback    *  on how much you learned from doing the assignment, and whether     *  you enjoyed doing it.	I feel as though students would benefit greatly if Dr. Osborne or Ms.   	Sabah had a larger presence in the discussion. I understand the idea behind it is to have students helping students, but a lot of us either  don’t have the experience with many topics or the deeper understanding yet, to be able to relay our own solutions or ideas. Hints/guidance supplied to questions or concepts being discussed on the forum could be beneficial to a majority of students.                                              *****************************************************************************/