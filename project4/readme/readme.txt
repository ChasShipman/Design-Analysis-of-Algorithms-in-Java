/****************************************************************************** *  Name:   Chas Shipman  *  LUID:   L20474906 *   * *  Partner Name:     N/A *  Partner LUID:    N/A *  * *  Hours to complete assignment (optional): * ******************************************************************************/Programming Assignment 4: Burrows-Wheeler/****************************************************************************** *  List in table format which input files you used to test your program. *  Fill in columns for how long your program takes to compress and *  decompress these instances (by applying BurrowsWheeler, MoveToFront, *  and Huffman in succession). Also, fill in the third column for *  the compression ratio (number of bytes in compressed message  *  divided by the number of bytes in the message). *****************************************************************************/File               Encoding Time    Decoding time       Compression ratio------------------------------------------------------------------------amendments.txt     .509s            .408s		.301
CS_bricks.jpg*	   .449s	    .383s		1.006*dickens.txt        1m51.081s        11.900s             .303
mobydick.txt       4.285s           .735s               .347us.gif*            .460s            .391s               1.026*/****************************************************************************** *  Compare the results of your program (compression ratio and running *  time) on mobydick.txt to that of the most popular Windows *  compression program (pkzip) or the most popular Unix/Mac one (gzip). *  If you don't have pkzip, use 7zip and compress using zip format. *****************************************************************************/My code 
Encoding time : 4.285s
Decoding time : .735s
Ratio: .347

gzip
Encoding time: .131s
Decoding time: .003s
Ratio: .407

gzip ran faster encoding and decoding 
my code has a smaller compression ration, though not by much./****************************************************************************** *  Give the order of growth of the running time of each of the 6 *  methods as a function of the input size n and the alphabet size R *  both in practice (on typical English text inputs) and in theory *  (in the worst case), e.g., n, n + R, n log n, n^2, or R n. * *  Include the time for sorting circular suffixes in Burrows-Wheeler *  transform(). *****************************************************************************/                                      typical            worst---------------------------------------------------------------------BurrowsWheeler transform()	      n + R              n + RBurrowsWheeler inverseTransform()     n + R              n + RMoveToFront encode()                  n                  nRMoveToFront decode()                  n                  nRHuffman compress()                    n + R log R        n + R log RHuffman expand()                      n                  n/****************************************************************************** *  Known bugs / limitations. *****************************************************************************/It would seem that JPGs and GIFs don't compress very well. using my code or gzip/****************************************************************************** *  Describe whatever help (if any) that you received. *  Don't include readings, lectures, and precepts, but do *  include any help from people (including TAs, *  classmates, and friends) and attribute them by name. *****************************************************************************/https://www.youtube.com/watch?v=MdvhQ0hcSzI&frags=pl%2Cwn
https://www.youtube.com/watch?v=iPCmvXJX2o0&frags=pl%2Cwn
https://www.youtube.com/watch?v=HKPrVm5FWvg
https://www.youtube.com/watch?v=biFtVGrDJ4U
https://www.youtube.com/watch?v=iPCmvXJX2o0

Got help from Charlie Wefelmeyer on correct command line execution for calculating time
****************************************************************************** *  Describe any serious problems you encountered.                     *****************************************************************************//****************************************************************************** *  List any other comments here. Feel free to provide any feedback    *  on how much you learned from doing the assignment, and whether     *  you enjoyed doing it. Additionally, you may include any suggestions *  for what to change or what to keep (assignments or otherwise) in future  *  semesters. *****************************************************************************